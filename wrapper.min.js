(() => { let t = document.createElement("script"); t.src = "https://tokenization.develop.accept.blue/tokenization/v0.2", t.id = "_iFrame", document.head.appendChild(t) })(); const _dataAttributeType = "value", _getAndSet = t => { Object.entries(t).forEach(t => { let e = document.getElementById(t[0]); (t[1].submit || t[1].text) && (t[1].submit ? e.submit() : e.textContent = t[1].value), e.setAttribute("value", t[1].value) }) }; function charge(t) { $(document).ready(function () { $.ajax({ url: "/api/transactions/sourcecharge", contentType: "application/json", data: JSON.stringify({ Source: t }), type: "POST", success: function (t) { console.log(t) }, error: function (t) { console.log(t) } }) }) } function refund(t) { $(document).ready(function () { $("#btnOkRefund").click(function () { $.ajax({ url: "/api/transactions/refund", beforeSend: function () { $("#btnCancelRefund").attr("disabled", !0), $("#btnOkRefund").attr("disabled", !0) }, contentType: "application/json", data: JSON.stringify(t), type: "POST", success: function (t) { t.error ? ($("#txtRefundSuccess").text(""), $("#txtRefundFailure").text("Payment Id not found")) : ($("#txtRefundSuccess").text("Refund processed"), $("#txtRefundFailure").text("")), $("#btnCancelRefund").removeAttr("disabled"), $("#btnOkRefund").removeAttr("disabled"), $("#modalRefundAmount").modal("hide"), $("#modalRefundResult").modal("show") }, error: function (t) { $("#btnCancelRefund").removeAttr("disabled"), $("#btnOkRefund").removeAttr("disabled"), $("#txtRefundSuccess").text(""), $("#txtRefundFailure").text(t.responseJSON.message), $("#modalRefundResult").modal("show") } }) }) }) } class HostedIFrame { cardForm; constructor(t, e, n) { this.tokenSourceKey = t, this.iframeMount = `#${e}`, this.btnMount = `${n}` } init() { return this._onLoad(() => { this.cardForm = new window.HostedTokenization(this.tokenSourceKey).create("card-form").mount(this.iframeMount) }), this } submit(t) { return this._clicked(this.btnMount, () => { let e = this._errorMount, n = this._sourceVerification; this.cardForm.getNonceToken().then(e => { n({ Source: "nonce-" + e.nonce, Expiry_Month: e.expiryMonth, Expiry_Year: e.expiryYear }), _getAndSet({ [t.form]: { submit: !0 } }) }).catch(n => { let o = ("" + n).replace("Error: ", ""); throw e(t.mountError, o, t.textContent), Error(o) }) }), this } styles(t) { return this._onLoad(() => this.cardForm.setStyles(t)), this } _errorMount(t, e, n = !1) { _getAndSet({ [t]: { value: e, text: n } }) } _onLoad(t) { window.addEventListener("load", t) } _clicked(t, e) { document.getElementById(t).addEventListener("click", e) } _sourceVerification(t) { $(document).ready(function () { $.ajax({ url: "/api/transactions/sourceverification", contentType: "application/json", data: JSON.stringify(t), type: "POST", success: function (t) { }, error: function (t) { console.log("Error:"), console.log(t) } }) }) } }
